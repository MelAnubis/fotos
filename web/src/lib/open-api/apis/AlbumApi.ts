/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAssetsDto,
  AddUsersDto,
  AlbumResponseDto,
  CreateAlbumDto,
  RemoveAssetsDto,
  UpdateAlbumDto,
} from '../models';
import {
    AddAssetsDtoFromJSON,
    AddAssetsDtoToJSON,
    AddUsersDtoFromJSON,
    AddUsersDtoToJSON,
    AlbumResponseDtoFromJSON,
    AlbumResponseDtoToJSON,
    CreateAlbumDtoFromJSON,
    CreateAlbumDtoToJSON,
    RemoveAssetsDtoFromJSON,
    RemoveAssetsDtoToJSON,
    UpdateAlbumDtoFromJSON,
    UpdateAlbumDtoToJSON,
} from '../models';

export interface AlbumControllerAddAssetsRequest {
    albumId: string;
    addAssetsDto: AddAssetsDto;
}

export interface AlbumControllerAddUsersRequest {
    albumId: string;
    addUsersDto: AddUsersDto;
}

export interface AlbumControllerCreateRequest {
    createAlbumDto: CreateAlbumDto;
}

export interface AlbumControllerDeleteAlbumRequest {
    albumId: string;
}

export interface AlbumControllerGetAlbumInfoRequest {
    albumId: string;
}

export interface AlbumControllerGetAllAlbumsRequest {
    shared?: boolean;
}

export interface AlbumControllerRemoveAssetFromAlbumRequest {
    albumId: string;
    removeAssetsDto: RemoveAssetsDto;
}

export interface AlbumControllerRemoveUserFromAlbumRequest {
    albumId: string;
    userId: string;
}

export interface AlbumControllerUpdateAlbumInfoRequest {
    albumId: string;
    updateAlbumDto: UpdateAlbumDto;
}

/**
 * 
 */
export class AlbumApi extends runtime.BaseAPI {

    /**
     */
    async albumControllerAddAssetsRaw(requestParameters: AlbumControllerAddAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerAddAssets.');
        }

        if (requestParameters.addAssetsDto === null || requestParameters.addAssetsDto === undefined) {
            throw new runtime.RequiredError('addAssetsDto','Required parameter requestParameters.addAssetsDto was null or undefined when calling albumControllerAddAssets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}/assets`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddAssetsDtoToJSON(requestParameters.addAssetsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async albumControllerAddAssets(requestParameters: AlbumControllerAddAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.albumControllerAddAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async albumControllerAddUsersRaw(requestParameters: AlbumControllerAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerAddUsers.');
        }

        if (requestParameters.addUsersDto === null || requestParameters.addUsersDto === undefined) {
            throw new runtime.RequiredError('addUsersDto','Required parameter requestParameters.addUsersDto was null or undefined when calling albumControllerAddUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}/users`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddUsersDtoToJSON(requestParameters.addUsersDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async albumControllerAddUsers(requestParameters: AlbumControllerAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.albumControllerAddUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async albumControllerCreateRaw(requestParameters: AlbumControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.createAlbumDto === null || requestParameters.createAlbumDto === undefined) {
            throw new runtime.RequiredError('createAlbumDto','Required parameter requestParameters.createAlbumDto was null or undefined when calling albumControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlbumDtoToJSON(requestParameters.createAlbumDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async albumControllerCreate(requestParameters: AlbumControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.albumControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async albumControllerDeleteAlbumRaw(requestParameters: AlbumControllerDeleteAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerDeleteAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async albumControllerDeleteAlbum(requestParameters: AlbumControllerDeleteAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.albumControllerDeleteAlbumRaw(requestParameters, initOverrides);
    }

    /**
     */
    async albumControllerGetAlbumInfoRaw(requestParameters: AlbumControllerGetAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerGetAlbumInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async albumControllerGetAlbumInfo(requestParameters: AlbumControllerGetAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.albumControllerGetAlbumInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async albumControllerGetAllAlbumsRaw(requestParameters: AlbumControllerGetAllAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlbumResponseDto>>> {
        const queryParameters: any = {};

        if (requestParameters.shared !== undefined) {
            queryParameters['shared'] = requestParameters.shared;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlbumResponseDtoFromJSON));
    }

    /**
     */
    async albumControllerGetAllAlbums(requestParameters: AlbumControllerGetAllAlbumsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlbumResponseDto>> {
        const response = await this.albumControllerGetAllAlbumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async albumControllerRemoveAssetFromAlbumRaw(requestParameters: AlbumControllerRemoveAssetFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerRemoveAssetFromAlbum.');
        }

        if (requestParameters.removeAssetsDto === null || requestParameters.removeAssetsDto === undefined) {
            throw new runtime.RequiredError('removeAssetsDto','Required parameter requestParameters.removeAssetsDto was null or undefined when calling albumControllerRemoveAssetFromAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}/assets`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveAssetsDtoToJSON(requestParameters.removeAssetsDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async albumControllerRemoveAssetFromAlbum(requestParameters: AlbumControllerRemoveAssetFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.albumControllerRemoveAssetFromAlbumRaw(requestParameters, initOverrides);
    }

    /**
     */
    async albumControllerRemoveUserFromAlbumRaw(requestParameters: AlbumControllerRemoveUserFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerRemoveUserFromAlbum.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling albumControllerRemoveUserFromAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}/user/{userId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async albumControllerRemoveUserFromAlbum(requestParameters: AlbumControllerRemoveUserFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.albumControllerRemoveUserFromAlbumRaw(requestParameters, initOverrides);
    }

    /**
     */
    async albumControllerUpdateAlbumInfoRaw(requestParameters: AlbumControllerUpdateAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling albumControllerUpdateAlbumInfo.');
        }

        if (requestParameters.updateAlbumDto === null || requestParameters.updateAlbumDto === undefined) {
            throw new runtime.RequiredError('updateAlbumDto','Required parameter requestParameters.updateAlbumDto was null or undefined when calling albumControllerUpdateAlbumInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlbumDtoToJSON(requestParameters.updateAlbumDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async albumControllerUpdateAlbumInfo(requestParameters: AlbumControllerUpdateAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.albumControllerUpdateAlbumInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
