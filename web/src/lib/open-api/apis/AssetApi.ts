/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetResponseDto,
  CheckDuplicateAssetDto,
  CreateAssetDto,
  CuratedLocationsResponseDto,
  CuratedObjectsResponseDto,
  DeleteAssetDto,
  SearchAssetDto,
} from '../models';
import {
    AssetResponseDtoFromJSON,
    AssetResponseDtoToJSON,
    CheckDuplicateAssetDtoFromJSON,
    CheckDuplicateAssetDtoToJSON,
    CreateAssetDtoFromJSON,
    CreateAssetDtoToJSON,
    CuratedLocationsResponseDtoFromJSON,
    CuratedLocationsResponseDtoToJSON,
    CuratedObjectsResponseDtoFromJSON,
    CuratedObjectsResponseDtoToJSON,
    DeleteAssetDtoFromJSON,
    DeleteAssetDtoToJSON,
    SearchAssetDtoFromJSON,
    SearchAssetDtoToJSON,
} from '../models';

export interface AssetControllerCheckDuplicateAssetRequest {
    checkDuplicateAssetDto: CheckDuplicateAssetDto;
}

export interface AssetControllerDeleteAssetByIdRequest {
    deleteAssetDto: DeleteAssetDto;
}

export interface AssetControllerDownloadFileRequest {
    aid: string;
    did: string;
    isThumb?: string;
    isWeb?: string;
}

export interface AssetControllerGetAssetByIdRequest {
    assetId: string;
}

export interface AssetControllerGetAssetThumbnailRequest {
    assetId: string;
}

export interface AssetControllerGetUserAssetsByDeviceIdRequest {
    deviceId: string;
}

export interface AssetControllerSearchAssetRequest {
    searchAssetDto: SearchAssetDto;
}

export interface AssetControllerServeFileRequest {
    aid: string;
    did: string;
    isThumb?: string;
    isWeb?: string;
}

export interface AssetControllerUploadFileRequest {
    createAssetDto: CreateAssetDto;
}

/**
 * 
 */
export class AssetApi extends runtime.BaseAPI {

    /**
     * Check duplicated asset before uploading - for Web upload used
     * 
     */
    async assetControllerCheckDuplicateAssetRaw(requestParameters: AssetControllerCheckDuplicateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkDuplicateAssetDto === null || requestParameters.checkDuplicateAssetDto === undefined) {
            throw new runtime.RequiredError('checkDuplicateAssetDto','Required parameter requestParameters.checkDuplicateAssetDto was null or undefined when calling assetControllerCheckDuplicateAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckDuplicateAssetDtoToJSON(requestParameters.checkDuplicateAssetDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check duplicated asset before uploading - for Web upload used
     * 
     */
    async assetControllerCheckDuplicateAsset(requestParameters: AssetControllerCheckDuplicateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetControllerCheckDuplicateAssetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetControllerDeleteAssetByIdRaw(requestParameters: AssetControllerDeleteAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteAssetDto === null || requestParameters.deleteAssetDto === undefined) {
            throw new runtime.RequiredError('deleteAssetDto','Required parameter requestParameters.deleteAssetDto was null or undefined when calling assetControllerDeleteAssetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAssetDtoToJSON(requestParameters.deleteAssetDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetControllerDeleteAssetById(requestParameters: AssetControllerDeleteAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetControllerDeleteAssetByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetControllerDownloadFileRaw(requestParameters: AssetControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aid === null || requestParameters.aid === undefined) {
            throw new runtime.RequiredError('aid','Required parameter requestParameters.aid was null or undefined when calling assetControllerDownloadFile.');
        }

        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling assetControllerDownloadFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.aid !== undefined) {
            queryParameters['aid'] = requestParameters.aid;
        }

        if (requestParameters.did !== undefined) {
            queryParameters['did'] = requestParameters.did;
        }

        if (requestParameters.isThumb !== undefined) {
            queryParameters['isThumb'] = requestParameters.isThumb;
        }

        if (requestParameters.isWeb !== undefined) {
            queryParameters['isWeb'] = requestParameters.isWeb;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/download`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetControllerDownloadFile(requestParameters: AssetControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetControllerDownloadFileRaw(requestParameters, initOverrides);
    }

    /**
     * Get all AssetEntity belong to the user
     * 
     */
    async assetControllerGetAllAssetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetResponseDtoFromJSON));
    }

    /**
     * Get all AssetEntity belong to the user
     * 
     */
    async assetControllerGetAllAssets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetResponseDto>> {
        const response = await this.assetControllerGetAllAssetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a single asset\'s information
     * 
     */
    async assetControllerGetAssetByIdRaw(requestParameters: AssetControllerGetAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetResponseDto>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetControllerGetAssetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/assetById/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get a single asset\'s information
     * 
     */
    async assetControllerGetAssetById(requestParameters: AssetControllerGetAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetResponseDto> {
        const response = await this.assetControllerGetAssetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerGetAssetSearchTermRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/searchTerm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async assetControllerGetAssetSearchTerm(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.assetControllerGetAssetSearchTermRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerGetAssetThumbnailRaw(requestParameters: AssetControllerGetAssetThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetControllerGetAssetThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/thumbnail/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async assetControllerGetAssetThumbnail(requestParameters: AssetControllerGetAssetThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.assetControllerGetAssetThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerGetCuratedLocationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CuratedLocationsResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/allLocation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CuratedLocationsResponseDtoFromJSON));
    }

    /**
     */
    async assetControllerGetCuratedLocation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CuratedLocationsResponseDto>> {
        const response = await this.assetControllerGetCuratedLocationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerGetCuratedObjectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CuratedObjectsResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/allObjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CuratedObjectsResponseDtoFromJSON));
    }

    /**
     */
    async assetControllerGetCuratedObject(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CuratedObjectsResponseDto>> {
        const response = await this.assetControllerGetCuratedObjectRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all asset of a device that are in the database, ID only.
     * 
     */
    async assetControllerGetUserAssetsByDeviceIdRaw(requestParameters: AssetControllerGetUserAssetsByDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling assetControllerGetUserAssetsByDeviceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all asset of a device that are in the database, ID only.
     * 
     */
    async assetControllerGetUserAssetsByDeviceId(requestParameters: AssetControllerGetUserAssetsByDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.assetControllerGetUserAssetsByDeviceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerSearchAssetRaw(requestParameters: AssetControllerSearchAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetResponseDto>>> {
        if (requestParameters.searchAssetDto === null || requestParameters.searchAssetDto === undefined) {
            throw new runtime.RequiredError('searchAssetDto','Required parameter requestParameters.searchAssetDto was null or undefined when calling assetControllerSearchAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchAssetDtoToJSON(requestParameters.searchAssetDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetResponseDtoFromJSON));
    }

    /**
     */
    async assetControllerSearchAsset(requestParameters: AssetControllerSearchAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetResponseDto>> {
        const response = await this.assetControllerSearchAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetControllerServeFileRaw(requestParameters: AssetControllerServeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aid === null || requestParameters.aid === undefined) {
            throw new runtime.RequiredError('aid','Required parameter requestParameters.aid was null or undefined when calling assetControllerServeFile.');
        }

        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling assetControllerServeFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.aid !== undefined) {
            queryParameters['aid'] = requestParameters.aid;
        }

        if (requestParameters.did !== undefined) {
            queryParameters['did'] = requestParameters.did;
        }

        if (requestParameters.isThumb !== undefined) {
            queryParameters['isThumb'] = requestParameters.isThumb;
        }

        if (requestParameters.isWeb !== undefined) {
            queryParameters['isWeb'] = requestParameters.isWeb;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/file`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetControllerServeFile(requestParameters: AssetControllerServeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetControllerServeFileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetControllerUploadFileRaw(requestParameters: AssetControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.createAssetDto === null || requestParameters.createAssetDto === undefined) {
            throw new runtime.RequiredError('createAssetDto','Required parameter requestParameters.createAssetDto was null or undefined when calling assetControllerUploadFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/asset/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetDtoToJSON(requestParameters.createAssetDto),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async assetControllerUploadFile(requestParameters: AssetControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.assetControllerUploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
