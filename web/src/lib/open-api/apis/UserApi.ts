/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProfileImageResponseDto,
  CreateUserDto,
  UpdateUserDto,
  UserCountResponseDto,
  UserResponseDto,
} from '../models';
import {
    CreateProfileImageResponseDtoFromJSON,
    CreateProfileImageResponseDtoToJSON,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserCountResponseDtoFromJSON,
    UserCountResponseDtoToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models';

export interface UserControllerCreateNewUserRequest {
    createUserDto: CreateUserDto;
}

export interface UserControllerCreateProfileImageRequest {
    file: Blob;
}

export interface UserControllerGetAllUsersRequest {
    isAll: boolean;
}

export interface UserControllerGetProfileImageRequest {
    userId: string;
}

export interface UserControllerGetUserCountRequest {
    isAdmin: boolean;
}

export interface UserControllerUpdateUserRequest {
    updateUserDto: UpdateUserDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async userControllerCreateNewUserRaw(requestParameters: UserControllerCreateNewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling userControllerCreateNewUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerCreateNewUser(requestParameters: UserControllerCreateNewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerCreateNewUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerCreateProfileImageRaw(requestParameters: UserControllerCreateProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProfileImageResponseDto>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling userControllerCreateProfileImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/user/profile-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProfileImageResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerCreateProfileImage(requestParameters: UserControllerCreateProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProfileImageResponseDto> {
        const response = await this.userControllerCreateProfileImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetAllUsersRaw(requestParameters: UserControllerGetAllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponseDto>>> {
        if (requestParameters.isAll === null || requestParameters.isAll === undefined) {
            throw new runtime.RequiredError('isAll','Required parameter requestParameters.isAll was null or undefined when calling userControllerGetAllUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.isAll !== undefined) {
            queryParameters['isAll'] = requestParameters.isAll;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseDtoFromJSON));
    }

    /**
     */
    async userControllerGetAllUsers(requestParameters: UserControllerGetAllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponseDto>> {
        const response = await this.userControllerGetAllUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetProfileImageRaw(requestParameters: UserControllerGetProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerGetProfileImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/profile-image/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerGetProfileImage(requestParameters: UserControllerGetProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetProfileImageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerGetUserCountRaw(requestParameters: UserControllerGetUserCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCountResponseDto>> {
        if (requestParameters.isAdmin === null || requestParameters.isAdmin === undefined) {
            throw new runtime.RequiredError('isAdmin','Required parameter requestParameters.isAdmin was null or undefined when calling userControllerGetUserCount.');
        }

        const queryParameters: any = {};

        if (requestParameters.isAdmin !== undefined) {
            queryParameters['isAdmin'] = requestParameters.isAdmin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCountResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserCount(requestParameters: UserControllerGetUserCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCountResponseDto> {
        const response = await this.userControllerGetUserCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerGetUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUpdateUserRaw(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters.updateUserDto === null || requestParameters.updateUserDto === undefined) {
            throw new runtime.RequiredError('updateUserDto','Required parameter requestParameters.updateUserDto was null or undefined when calling userControllerUpdateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters.updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUpdateUser(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
