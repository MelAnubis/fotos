/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    lastName: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserEntity
     */
    isAdmin: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    salt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    profileImagePath: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserEntity
     */
    shouldChangePassword: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    createdAt: string;
}

/**
 * Check if a given object implements the UserEntity interface.
 */
export function instanceOfUserEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "isAdmin" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "profileImagePath" in value;
    isInstance = isInstance && "shouldChangePassword" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function UserEntityFromJSON(json: any): UserEntity {
    return UserEntityFromJSONTyped(json, false);
}

export function UserEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'isAdmin': json['isAdmin'],
        'email': json['email'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'salt': !exists(json, 'salt') ? undefined : json['salt'],
        'profileImagePath': json['profileImagePath'],
        'shouldChangePassword': json['shouldChangePassword'],
        'createdAt': json['createdAt'],
    };
}

export function UserEntityToJSON(value?: UserEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'isAdmin': value.isAdmin,
        'email': value.email,
        'password': value.password,
        'salt': value.salt,
        'profileImagePath': value.profileImagePath,
        'shouldChangePassword': value.shouldChangePassword,
        'createdAt': value.createdAt,
    };
}

