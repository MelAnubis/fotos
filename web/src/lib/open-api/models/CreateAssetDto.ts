/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateAssetDto
 */
export interface CreateAssetDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    deviceAssetId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    deviceId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    assetType: CreateAssetDtoAssetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    modifiedAt: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAssetDto
     */
    isFavorite: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    fileExtension: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetDto
     */
    duration?: string;
}


/**
 * @export
 */
export const CreateAssetDtoAssetTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Other: 'OTHER'
} as const;
export type CreateAssetDtoAssetTypeEnum = typeof CreateAssetDtoAssetTypeEnum[keyof typeof CreateAssetDtoAssetTypeEnum];


/**
 * Check if a given object implements the CreateAssetDto interface.
 */
export function instanceOfCreateAssetDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "deviceAssetId" in value;
    isInstance = isInstance && "deviceId" in value;
    isInstance = isInstance && "assetType" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "modifiedAt" in value;
    isInstance = isInstance && "isFavorite" in value;
    isInstance = isInstance && "fileExtension" in value;

    return isInstance;
}

export function CreateAssetDtoFromJSON(json: any): CreateAssetDto {
    return CreateAssetDtoFromJSONTyped(json, false);
}

export function CreateAssetDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateAssetDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deviceAssetId': json['deviceAssetId'],
        'deviceId': json['deviceId'],
        'assetType': json['assetType'],
        'createdAt': json['createdAt'],
        'modifiedAt': json['modifiedAt'],
        'isFavorite': json['isFavorite'],
        'fileExtension': json['fileExtension'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
    };
}

export function CreateAssetDtoToJSON(value?: CreateAssetDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deviceAssetId': value.deviceAssetId,
        'deviceId': value.deviceId,
        'assetType': value.assetType,
        'createdAt': value.createdAt,
        'modifiedAt': value.modifiedAt,
        'isFavorite': value.isFavorite,
        'fileExtension': value.fileExtension,
        'duration': value.duration,
    };
}

