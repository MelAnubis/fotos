/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DeviceInfoResponseDto
 */
export interface DeviceInfoResponseDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceInfoResponseDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfoResponseDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfoResponseDto
     */
    deviceId: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfoResponseDto
     */
    deviceType: DeviceInfoResponseDtoDeviceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfoResponseDto
     */
    notificationToken: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfoResponseDto
     */
    createdAt: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceInfoResponseDto
     */
    isAutoBackup: boolean;
}


/**
 * @export
 */
export const DeviceInfoResponseDtoDeviceTypeEnum = {
    Ios: 'IOS',
    Android: 'ANDROID',
    Web: 'WEB'
} as const;
export type DeviceInfoResponseDtoDeviceTypeEnum = typeof DeviceInfoResponseDtoDeviceTypeEnum[keyof typeof DeviceInfoResponseDtoDeviceTypeEnum];


/**
 * Check if a given object implements the DeviceInfoResponseDto interface.
 */
export function instanceOfDeviceInfoResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "deviceId" in value;
    isInstance = isInstance && "deviceType" in value;
    isInstance = isInstance && "notificationToken" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "isAutoBackup" in value;

    return isInstance;
}

export function DeviceInfoResponseDtoFromJSON(json: any): DeviceInfoResponseDto {
    return DeviceInfoResponseDtoFromJSONTyped(json, false);
}

export function DeviceInfoResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceInfoResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'deviceId': json['deviceId'],
        'deviceType': json['deviceType'],
        'notificationToken': json['notificationToken'],
        'createdAt': json['createdAt'],
        'isAutoBackup': json['isAutoBackup'],
    };
}

export function DeviceInfoResponseDtoToJSON(value?: DeviceInfoResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'deviceId': value.deviceId,
        'deviceType': value.deviceType,
        'notificationToken': value.notificationToken,
        'createdAt': value.createdAt,
        'isAutoBackup': value.isAutoBackup,
    };
}

