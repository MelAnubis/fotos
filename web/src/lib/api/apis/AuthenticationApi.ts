/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminSignupResponseDto,
  LoginCredentialDto,
  LoginResponseDto,
  SignUpDto,
} from '../models';
import {
    AdminSignupResponseDtoFromJSON,
    AdminSignupResponseDtoToJSON,
    LoginCredentialDtoFromJSON,
    LoginCredentialDtoToJSON,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    SignUpDtoFromJSON,
    SignUpDtoToJSON,
} from '../models';

export interface AuthControllerAdminSignUpRequest {
    signUpDto: SignUpDto;
}

export interface AuthControllerLoginRequest {
    loginCredentialDto: LoginCredentialDto;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async authControllerAdminSignUpRaw(requestParameters: AuthControllerAdminSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminSignupResponseDto>> {
        if (requestParameters.signUpDto === null || requestParameters.signUpDto === undefined) {
            throw new runtime.RequiredError('signUpDto','Required parameter requestParameters.signUpDto was null or undefined when calling authControllerAdminSignUp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/admin-sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpDtoToJSON(requestParameters.signUpDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminSignupResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerAdminSignUp(requestParameters: AuthControllerAdminSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminSignupResponseDto> {
        const response = await this.authControllerAdminSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.loginCredentialDto === null || requestParameters.loginCredentialDto === undefined) {
            throw new runtime.RequiredError('loginCredentialDto','Required parameter requestParameters.loginCredentialDto was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginCredentialDtoToJSON(requestParameters.loginCredentialDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerValidateTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/validateToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerValidateToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerValidateTokenRaw(initOverrides);
    }

}
