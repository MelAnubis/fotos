/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeviceInfoDto,
  DeviceInfoResponseDto,
} from '../models';
import {
    CreateDeviceInfoDtoFromJSON,
    CreateDeviceInfoDtoToJSON,
    DeviceInfoResponseDtoFromJSON,
    DeviceInfoResponseDtoToJSON,
} from '../models';

export interface DeviceInfoControllerCreateRequest {
    createDeviceInfoDto: CreateDeviceInfoDto;
}

export interface DeviceInfoControllerUpdateRequest {
    body: object;
}

/**
 * 
 */
export class DeviceInfoApi extends runtime.BaseAPI {

    /**
     */
    async deviceInfoControllerCreateRaw(requestParameters: DeviceInfoControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceInfoResponseDto>> {
        if (requestParameters.createDeviceInfoDto === null || requestParameters.createDeviceInfoDto === undefined) {
            throw new runtime.RequiredError('createDeviceInfoDto','Required parameter requestParameters.createDeviceInfoDto was null or undefined when calling deviceInfoControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/device-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceInfoDtoToJSON(requestParameters.createDeviceInfoDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceInfoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceInfoControllerCreate(requestParameters: DeviceInfoControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceInfoResponseDto> {
        const response = await this.deviceInfoControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deviceInfoControllerUpdateRaw(requestParameters: DeviceInfoControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceInfoResponseDto>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deviceInfoControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/device-info`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceInfoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deviceInfoControllerUpdate(requestParameters: DeviceInfoControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceInfoResponseDto> {
        const response = await this.deviceInfoControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
