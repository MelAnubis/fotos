/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PersonResponseDto,
  SearchExploreResponseDto,
  SearchResponseDto,
  SearchSuggestionType,
} from '../models/index';
import {
    PersonResponseDtoFromJSON,
    PersonResponseDtoToJSON,
    SearchExploreResponseDtoFromJSON,
    SearchExploreResponseDtoToJSON,
    SearchResponseDtoFromJSON,
    SearchResponseDtoToJSON,
    SearchSuggestionTypeFromJSON,
    SearchSuggestionTypeToJSON,
} from '../models/index';

export interface GetSearchSuggestionsRequest {
    type: SearchSuggestionType;
    country?: string;
    make?: string;
    model?: string;
    state?: string;
}

export interface SearchRequest {
    clip?: boolean;
    motion?: boolean;
    q?: string;
    query?: string;
    recent?: boolean;
    smart?: boolean;
    type?: SearchTypeEnum;
    withArchived?: boolean;
}

export interface SearchPersonRequest {
    name: string;
    withHidden?: boolean;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     */
    async getExploreDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchExploreResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search/explore`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchExploreResponseDtoFromJSON));
    }

    /**
     */
    async getExploreData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchExploreResponseDto>> {
        const response = await this.getExploreDataRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSearchSuggestionsRaw(requestParameters: GetSearchSuggestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getSearchSuggestions.');
        }

        const queryParameters: any = {};

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.make !== undefined) {
            queryParameters['make'] = requestParameters.make;
        }

        if (requestParameters.model !== undefined) {
            queryParameters['model'] = requestParameters.model;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search/suggestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSearchSuggestions(requestParameters: GetSearchSuggestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSearchSuggestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters.clip !== undefined) {
            queryParameters['clip'] = requestParameters.clip;
        }

        if (requestParameters.motion !== undefined) {
            queryParameters['motion'] = requestParameters.motion;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.recent !== undefined) {
            queryParameters['recent'] = requestParameters.recent;
        }

        if (requestParameters.smart !== undefined) {
            queryParameters['smart'] = requestParameters.smart;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.withArchived !== undefined) {
            queryParameters['withArchived'] = requestParameters.withArchived;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async search(requestParameters: SearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponseDto> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchPersonRaw(requestParameters: SearchPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonResponseDto>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchPerson.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.withHidden !== undefined) {
            queryParameters['withHidden'] = requestParameters.withHidden;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search/person`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonResponseDtoFromJSON));
    }

    /**
     */
    async searchPerson(requestParameters: SearchPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonResponseDto>> {
        const response = await this.searchPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Other: 'OTHER'
} as const;
export type SearchTypeEnum = typeof SearchTypeEnum[keyof typeof SearchTypeEnum];
